{"version":3,"sources":["resources/app.asar/node_modules/browser-pack/_prelude.js","scripts/Game.js","project.js","scripts/again.js","scripts/home.js","scripts/player.js","scripts/startLabel.js","scripts/star.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Game","module","cc","_RFpush","Class","extends","Component","properties","starPrefab","default","type","Prefab","scoreDisplay","Label","maxStarDuration","minStarDuration","ground","Node","player","scoreAudio","url","AudioClip","gameOver","this","stopAllActions","director","loadScene","gainScore","score","string","toString","audioEngine","playEffect","onLoad","groundY","y","height","timer","starDuration","spawnNewStar","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","random0To1","randX","randY","jumpHeight","maxX","width","randomMinus1To1","p","update","dt","_RFpop","again","on","event","home","jumpDuration","maxMoveSpeed","accel","jumpAudio","setJumpAction","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","accLeft","xSpeed","accRight","Math","abs","x","jumpAction","runAction","setInputControl","inputManager","setAccelerometerEnabled","systemEvent","SystemEvent","EventType","DEVICEMOTION","onDeviceMotionEvent","onDestroy","self","eventManager","addListener","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","down","d","left","right","onKeyReleased","log","acc","startLabel","star","pickRadius","getPlayerDistance","onPicked","playerPos","getPosition","dist","pDistance","position","destroy"],"mappings":"AAAAA,QAAA,QAAAC,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAR,UAAAA,OAAA,KAAAO,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAG,EAAA,MAAAA,GAAAH,GAAA,EAAA,IAAAI,GAAA,GAAAC,OAAA,uBAAAL,EAAA,IAAA,MAAAI,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAV,EAAAG,IAAAQ,WAAAZ,GAAAI,GAAA,GAAAS,KAAAF,EAAAC,QAAA,SAAAb,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAC,QAAAb,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAQ,QAAA,IAAA,GAAAL,GAAA,kBAAAT,UAAAA,QAAAM,EAAA,EAAAA,EAAAF,EAAAY,OAAAV,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAY,MAAA,SAAAjB,EAAAkB,EAAAJ,GCAA,YACAK,IAAAC,QAAAF,EAAA,0BAAA,QAGAC,GAAAE,OACAC,UAAAH,GAAAI,UAEAC,YAYAC,YACAC,UAAA,KACAC,KAAAR,GAAAS,QAGAC,cACAH,UAAA,KACAC,KAAAR,GAAAW,OAGAC,gBAAA,EACAC,gBAAA,EAEAC,QACAP,UAAA,KACAC,KAAAR,GAAAe,MAGAC,QACAT,UAAA,KACAC,KAAAR,GAAAe,MAGAE,YACAV,UAAA,KACAW,IAAAlB,GAAAmB,YAKAC,SAAA,WACAC,KAAAL,OAAAM,iBACAtB,GAAAuB,SAAAC,UAAA,cAGAC,UAAA,WACAJ,KAAAK,OAAA,EAEAL,KAAAX,aAAAiB,OAAA,UAAAN,KAAAK,MAAAE,WAEA5B,GAAA6B,YAAAC,WAAAT,KAAAJ,YAAA,IAIAc,OAAA,WAEAV,KAAAW,QAAAX,KAAAP,OAAAmB,EAAAZ,KAAAP,OAAAoB,OAAA,EAGAb,KAAAc,MAAA,EACAd,KAAAe,aAAA,EAEAf,KAAAgB,eAEAhB,KAAAK,MAAA,GAGAW,aAAA,WAEA,GAAAC,GAAAtC,GAAAuC,YAAAlB,KAAAf,WAEAe,MAAAmB,KAAAC,SAAAH,GAEAA,EAAAI,YAAArB,KAAAsB,sBACAL,EAAAM,aAAA,QAAAC,KAAAxB,KAEAA,KAAAe,aAAAf,KAAAR,gBAAAb,GAAA8C,cAAAzB,KAAAT,gBAAAS,KAAAR,iBACAQ,KAAAc,MAAA,GAGAQ,mBAAA,WACA,GAAAI,GAAA,EAEAC,EAAA3B,KAAAW,QAAAhC,GAAA8C,aAAAzB,KAAAL,OAAA4B,aAAA,UAAAK,WAAA,GAEAC,EAAA7B,KAAAmB,KAAAW,MAAA,CAGA,OAFAJ,GAAA/C,GAAAoD,kBAAAF,EAEAlD,GAAAqD,EAAAN,EAAAC,IAIAM,OAAA,SAAAC,GAGA,MAAAlC,MAAAc,MAAAd,KAAAe,iBACAf,MAAAD,gBAGAC,KAAAc,OAAAoB,MAIAvD,GAAAwD,cCEMC,OAAS,SAAS5E,EAAQkB,EAAOJ,GClHvC,YACAK,IAAAC,QAAAF,EAAA,0BAAA,SAGAC,GAAAE,OACAC,UAAAH,GAAAI,UAEAC,cAcA0B,OAAA,WACAV,KAAAmB,KAAAkB,GAAA,YAAA,SAAAC,GACA3D,GAAAuB,SAAAC,UAAA,kBAUAxB,GAAAwD,cDoHMI,MAAQ,SAAS/E,EAAQkB,EAAOJ,GErJtC,YACAK,IAAAC,QAAAF,EAAA,0BAAA,QAGAC,GAAAE,OACAC,UAAAH,GAAAI,UAEAC,cAcA0B,OAAA,WAEAV,KAAAmB,KAAAkB,GAAA,YAAA,SAAAC,GACA3D,GAAAuB,SAAAC,UAAA,mBAUAxB,GAAAwD,cFuJMxC,QAAU,SAASnC,EAAQkB,EAAOJ,GGzLxC,YACAK,IAAAC,QAAAF,EAAA,0BAAA,UAGAC,GAAAE,OACAC,UAAAH,GAAAI,UAEAC,YAWA4C,WAAA,EACAY,aAAA,EACAC,aAAA,EAGAC,MAAA,EAGAC,WACAzD,UAAA,KACAW,IAAAlB,GAAAmB,YAIA8C,cAAA,WAEA,GAAAC,GAAAlE,GAAAmE,OAAA9C,KAAAwC,aAAA7D,GAAAqD,EAAA,EAAAhC,KAAA4B,aAAAmB,OAAApE,GAAAqE,sBAEAC,EAAAtE,GAAAmE,OAAA9C,KAAAwC,aAAA7D,GAAAqD,EAAA,GAAAhC,KAAA4B,aAAAmB,OAAApE,GAAAuE,qBAEAC,EAAAxE,GAAAyE,SAAApD,KAAAqD,cAAArD,KAEA,OAAArB,IAAA2E,cAAA3E,GAAA4E,SAAAV,EAAAI,EAAAE,KAGAE,cAAA,WAEA1E,GAAA6B,YAAAC,WAAAT,KAAA2C,WAAA,IAGAV,OAAA,SAAAC,GAEAlC,KAAAwD,QACAxD,KAAAyD,QAAAzD,KAAA0C,MAAAR,EACAlC,KAAA0D,WACA1D,KAAAyD,QAAAzD,KAAA0C,MAAAR,GAGAyB,KAAAC,IAAA5D,KAAAyD,QAAAzD,KAAAyC,eAEAzC,KAAAyD,OAAAzD,KAAAyC,aAAAzC,KAAAyD,OAAAE,KAAAC,IAAA5D,KAAAyD,SAIAzD,KAAAmB,KAAA0C,GAAA7D,KAAAyD,OAAAvB,GAIAxB,OAAA,WAEAV,KAAA8D,WAAA9D,KAAA4C,gBACA5C,KAAAmB,KAAA4C,UAAA/D,KAAA8D,YAGA9D,KAAAwD,SAAA,EACAxD,KAAA0D,UAAA,EAEA1D,KAAAyD,OAAA,EAEAzD,KAAAgE,kBAEArF,GAAAsF,aAAAC,yBAAA,GACAvF,GAAAwF,YAAA9B,GAAA1D,GAAAyF,YAAAC,UAAAC,aAAAtE,KAAAuE,oBAAAvE,OAGAwE,UAAA,WACA7F,GAAAwF,YAAA9B,GAAA1D,GAAAyF,YAAAC,UAAAC,aAAAtE,KAAAuE,oBAAAvE,OAIAgE,gBAAA,WACA,GAAAS,GAAAzE,IAEArB,IAAA+F,aAAAC,aACArC,MAAA3D,GAAAiG,cAAAC,SAEAC,aAAA,SAAAC,EAAAzC,GACA,OAAAyC,GACA,IAAApG,IAAAqG,IAAAnH,EACA4G,EAAAjB,SAAA,EACAiB,EAAAf,UAAA,CACA,MACA,KAAA/E,IAAAqG,IAAAC,KACAR,EAAAjB,SAAA,EACAiB,EAAAf,UAAA,CACA,MACA,KAAA/E,IAAAqG,IAAAhH,EACAyG,EAAAjB,SAAA,EACAiB,EAAAf,UAAA,CACA,MACA,KAAA/E,IAAAqG,IAAAE,EACAT,EAAAjB,SAAA,EACAiB,EAAAf,UAAA,CACA,MACA,KAAA/E,IAAAqG,IAAAG,KACAV,EAAAjB,SAAA,EACAiB,EAAAf,UAAA,CACA,MACA,KAAA/E,IAAAqG,IAAAI,MACAX,EAAAjB,SAAA,EACAiB,EAAAf,UAAA,IAKA2B,cAAA,SAAAN,EAAAzC,GACA,OAAAyC,GAEA,IAAApG,IAAAqG,IAAAG,KACAV,EAAAjB,SAAA,CACA,MACA,KAAA7E,IAAAqG,IAAAI,MACAX,EAAAf,UAAA,CACA,MACA,KAAA/E,IAAAqG,IAAAhH,EACAyG,EAAAjB,SAAA,CACA,MACA,KAAA7E,IAAAqG,IAAAE,EACAT,EAAAf,UAAA,KAKAe,EAAAtD,OAGAoD,oBAAA,SAAAjC,GACA3D,GAAA2G,IAAAhD,EAAAiD,IAAA1B,EAAA,MAAAvB,EAAAiD,IAAA3E,MAQAjC,GAAAwD,cH2LMqD,YAAc,SAAShI,EAAQkB,EAAOJ,GIpV5C,YACAK,IAAAC,QAAAF,EAAA,0BAAA,cAGAC,GAAAE,OACAC,UAAAH,GAAAI,UAEAC,cAcA0B,OAAA,WACAV,KAAAmB,KAAAkB,GAAA,YAAA,SAAAC,GACA3D,GAAAuB,SAAAC,UAAA,kBAUAxB,GAAAwD,cJsVMsD,MAAQ,SAASjI,EAAQkB,EAAOJ,GKvXtC,YACAK,IAAAC,QAAAF,EAAA,0BAAA,QAGAC,GAAAE,OACAC,UAAAH,GAAAI,UAEAC,YAWA0G,WAAA,GAIAhF,OAAA,aAGAuB,OAAA,SAAAC,GAEA,GAAAlC,KAAA2F,oBAAA3F,KAAA0F,WAGA,WADA1F,MAAA4F,YAIAD,kBAAA,WAEA,GAAAE,GAAA7F,KAAAwB,KAAA7B,OAAAmG,cAEAC,EAAApH,GAAAqH,UAAAhG,KAAAmB,KAAA8E,SAAAJ,EACA,OAAAE,IAGAH,SAAA,WAEA5F,KAAAwB,KAAAR,eAEAhB,KAAAmB,KAAA+E,UACAlG,KAAAwB,KAAApB,eAIAzB,GAAAwD,mBLyXW,OAAO,QAAQ,OAAO,SAAS,OAAO","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, '4927cnhSoBAh7NtZbZGnNmH', 'Game');\n// scripts\\Game.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // Game.js\n    gameOver: function gameOver() {\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\n        cc.director.loadScene('overscene');\n    },\n\n    gainScore: function gainScore() {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 初始化计时器\n        //this.getComponent('player').onLoad()\n        this.timer = 0;\n        this.starDuration = 0;\n        // 生成一个新的星星\n        this.spawnNewStar();\n        // 初始化计分\n        this.score = 0;\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('star').game = this;\n\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n        // 返回星星坐标\n        return cc.p(randX, randY);\n    },\n\n    //called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    }\n});\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Game\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '4927cnhSoBAh7NtZbZGnNmH', 'Game');\n// scripts\\Game.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // Game.js\n    gameOver: function gameOver() {\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\n        cc.director.loadScene('overscene');\n    },\n\n    gainScore: function gainScore() {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 初始化计时器\n        //this.getComponent('player').onLoad()\n        this.timer = 0;\n        this.starDuration = 0;\n        // 生成一个新的星星\n        this.spawnNewStar();\n        // 初始化计分\n        this.score = 0;\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('star').game = this;\n\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n        // 返回星星坐标\n        return cc.p(randX, randY);\n    },\n\n    //called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    }\n});\n\ncc._RFpop();\n},{}],\"again\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'a0be021FRBKBrbnO1yHvt/c', 'again');\n// scripts\\again.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.node.on('mousedown', function (event) {\n            cc.director.loadScene(\"mainscene\");\n        });\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"home\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'd57fcKvha1EE5TkJAfeqWnG', 'home');\n// scripts\\home.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n\n        this.node.on('mousedown', function (event) {\n            cc.director.loadScene(\"startscene\");\n        });\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"player\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'a0306eOjYVIPIt6ssMBBw30', 'player');\n// scripts\\player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n\n        //加速度大小\n        accel: 0,\n\n        // 跳跃音效资源\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    setJumpAction: function setJumpAction() {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    update: function update(dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n        // 初始化键盘输入监听\n        this.setInputControl();\n        //初始化重力感应监听事件\n        cc.inputManager.setAccelerometerEnabled(true);\n        cc.systemEvent.on(cc.SystemEvent.EventType.DEVICEMOTION, this.onDeviceMotionEvent, this);\n    },\n\n    onDestroy: function onDestroy() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.DEVICEMOTION, this.onDeviceMotionEvent, this);\n    },\n\n    //键盘监听事件\n    setInputControl: function setInputControl() {\n        var self = this;\n        // 添加键盘事件监听\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // 有按键按下时，判断是否是我们指定的方向控制键，并设置向对应方向加速\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.s:\n                        self.accLeft = false;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.down:\n                        self.accLeft = false;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                    case cc.KEY.left:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.right:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // 松开按键时，停止向该方向的加速\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n\n                    case cc.KEY.left:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.right:\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n\n        }, self.node);\n    },\n    //重力监听事件\n    onDeviceMotionEvent: function onDeviceMotionEvent(event) {\n        cc.log(event.acc.x + \"   \" + event.acc.y);\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"startLabel\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '18a95HorfZPhIq/2gsx2sI/', 'startLabel');\n// scripts\\startLabel.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.node.on('mousedown', function (event) {\n            cc.director.loadScene(\"mainscene\");\n        });\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"star\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'f401bnOhdZFLbaC0+MIeUnL', 'star');\n// scripts\\star.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n    },\n    getPlayerDistance: function getPlayerDistance() {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n        this.game.gainScore();\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"again\",\"home\",\"player\",\"star\",\"startLabel\"])\n\n","\"use strict\";\ncc._RFpush(module, 'a0be021FRBKBrbnO1yHvt/c', 'again');\n// scripts\\again.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.node.on('mousedown', function (event) {\n            cc.director.loadScene(\"mainscene\");\n        });\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'd57fcKvha1EE5TkJAfeqWnG', 'home');\n// scripts\\home.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n\n        this.node.on('mousedown', function (event) {\n            cc.director.loadScene(\"startscene\");\n        });\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'a0306eOjYVIPIt6ssMBBw30', 'player');\n// scripts\\player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n\n        //加速度大小\n        accel: 0,\n\n        // 跳跃音效资源\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    setJumpAction: function setJumpAction() {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    update: function update(dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n        // 初始化键盘输入监听\n        this.setInputControl();\n        //初始化重力感应监听事件\n        cc.inputManager.setAccelerometerEnabled(true);\n        cc.systemEvent.on(cc.SystemEvent.EventType.DEVICEMOTION, this.onDeviceMotionEvent, this);\n    },\n\n    onDestroy: function onDestroy() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.DEVICEMOTION, this.onDeviceMotionEvent, this);\n    },\n\n    //键盘监听事件\n    setInputControl: function setInputControl() {\n        var self = this;\n        // 添加键盘事件监听\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // 有按键按下时，判断是否是我们指定的方向控制键，并设置向对应方向加速\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.s:\n                        self.accLeft = false;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.down:\n                        self.accLeft = false;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                    case cc.KEY.left:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.right:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // 松开按键时，停止向该方向的加速\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n\n                    case cc.KEY.left:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.right:\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n\n        }, self.node);\n    },\n    //重力监听事件\n    onDeviceMotionEvent: function onDeviceMotionEvent(event) {\n        cc.log(event.acc.x + \"   \" + event.acc.y);\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '18a95HorfZPhIq/2gsx2sI/', 'startLabel');\n// scripts\\startLabel.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.node.on('mousedown', function (event) {\n            cc.director.loadScene(\"mainscene\");\n        });\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'f401bnOhdZFLbaC0+MIeUnL', 'star');\n// scripts\\star.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n    },\n    getPlayerDistance: function getPlayerDistance() {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n        this.game.gainScore();\n    }\n});\n\ncc._RFpop();"],"sourceRoot":"/source/"}//# sourceMappingURL=data:application/json;charset=utf-8;base64,